"""
This file is to draw curves using json files generated by gcutify.
Make sure that matplotlib is accessible
"""
import argparse
import json
import os
import sys
from collections import defaultdict
from typing import TextIO, List, Any

import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerTuple


class DefaultVal:
    limlow = -1
    limhigh = -1
    empty_ticks = []
    legend = "none"
    legendfontsize = 12


class PlotParams:
    def __init__(self, args: Any):
        self.xlabel = args.xlabel
        self.xlabel_weight = args.xlabel_weight
        self.xlabel_size = args.xlabel_size

        self.ylabel = args.ylabel
        self.ylabel_weight = args.ylabel_weight
        self.ylabel_size = args.ylabel_size

        self.xlim_low = args.xlim_low
        self.xlim_high = args.xlim_high

        self.ylim_low = args.ylim_low
        self.ylim_high = args.ylim_high

        self.xticks_val = args.xticks_val
        self.xticks_text = args.xticks_text

        if len(self.xticks_val) != len(self.xticks_text):
            print(f"{self.xticks_val} does not match {self.xticks_text}", file=sys.stderr)
            sys.exit(-1)

        self.yticks_val = args.yticks_val
        self.yticks_text = args.yticks_text

        if len(self.yticks_val) != len(self.yticks_text):
            print(f"{self.yticks_val} does not match {self.yticks_text}", file=sys.stderr)
            sys.exit(-1)

        self.tick_size = args.tick_size

        self.xscale = args.xscale
        self.yscale = args.yscale

        self.legend_loc = args.legend_loc
        self.legend_fontsize = args.legend_fontsize
        self.legend_handle_length = args.legend_handle_length

        self.set_tight_layout = args.tight

        self.vlines = args.vlines
        self.vline_width = args.vline_width
        self.vline_color = args.vline_color
        self.vline_style = args.vline_style
        self.vline_label = args.vline_label

        if not (len(self.vlines) == len(self.vline_width) == len(self.vline_color) == len(self.vlines)):
            print(f"vlines should have same number of parameters", file=sys.stderr)
            sys.exit(-1)
            pass
        if len(self.vlinelabel) != 0 and len(self.vlinelabel) != len(self.vlines):
            print(f"vlines should have same number of parameters", file=sys.stderr)
            sys.exit(-1)

        self.vline_label_hide = len(self.vlinelabel) == 0
        if self.vline_label_hide:
            self.vlinelabel = ["" for _ in range(len(self.vlines))]

        self.save = args.fd_save
        if os.path.isdir(self.save):
            print(f"{self.save} is a directory, use a file please", file=sys.stderr)
            sys.exit(-1)


class LineParam:
    def __init__(self, guesses_list, rate_list, color, marker, linewidth, linestyle, label):
        self.guesses_list = guesses_list
        self.rate_list = rate_list
        self.color = color
        self.marker = marker
        self.linewidth = linewidth
        self.linestyle = linestyle
        self.label = label


def read_gutify(json_file: TextIO, close_fd: bool):
    data = json.load(json_file)
    guesses_list = data["guesses_list"]
    cracked_list = data["cracked_list"]
    label = data["label"]
    color = data["color"]
    total = data["total"]
    marker = data["marker"]
    line_width = data["line_width"]
    line_style = data["line_style"]
    ratio_list = [cracked / total * 100 for cracked in cracked_list]
    del data
    del cracked_list
    if close_fd:
        json_file.close()
    elif json_file.seekable():
        json_file.seek(0)
    return LineParam(guesses_list, ratio_list, color, marker, line_width, line_style, label)


def curve(json_files: List[TextIO], plot_params: PlotParams, close_fd: bool = True):
    fig = plt.figure()
    if plot_params.set_tight_layout:
        fig.set_tight_layout(True)
    label_line = defaultdict(list)
    for json_file in json_files:
        line_params = read_gutify(json_file=json_file, close_fd=close_fd)
        line, = plt.plot(line_params.guesses_list, line_params.rate_list, color=line_params.color,
                         marker=line_params.marker, linewidth=line_params.linewidth,
                         linestyle=line_params.linestyle, label=line_params.label)
        label_line[line_params.label].append(line)
    plt.xscale(plot_params.xscale)
    plt.yscale(plot_params.yscale)
    if plot_params.xlim_low != DefaultVal.limlow and plot_params.xlim_high != DefaultVal.limhigh:
        plt.xlim([plot_params.xlim_low, plot_params.xlim_high])
    if plot_params.ylim_low != DefaultVal.limlow and plot_params.ylim_high != DefaultVal.limhigh:
        plt.ylim([plot_params.ylim_low, plot_params.ylim_high])
    plt.xlabel(xlabel=plot_params.xlabel,
               fontdict={"weight": plot_params.xlabel_weight,
                         "size": plot_params.xlabel_size})
    plt.ylabel(ylabel=plot_params.ylabel,
               fontdict={"weight": plot_params.ylabel_weight,
                         "size": plot_params.ylabel_size})
    if len(plot_params.yticks_val) != len(DefaultVal.empty_ticks):
        plt.yticks(plot_params.yticks_val, plot_params.yticks_text)
    if len(plot_params.xticks_val) != len(DefaultVal.empty_ticks):
        plt.xticks(plot_params.xticks_val, plot_params.xticks_text)
    plt.tick_params(labelsize=plot_params.tick_size)
    for vline_x, vline_width, vline_color, vline_style, vline_label in \
            zip(plot_params.vlines, plot_params.vline_width,
                plot_params.vline_color, plot_params.vline_style, plot_params.vlinelabel):
        line = plt.axvline(x=vline_x, linewidth=vline_width, color=vline_color, linestyle=vline_style,
                           label=vline_label)
        if not plot_params.vline_label_hide:
            label_line[vline_label].append(line)
    plt.grid(ls="--")
    if plot_params.legend_loc != DefaultVal.legend:
        plt.legend([tuple(label_line[k]) for k in label_line.keys()],
                   [label for label in label_line.keys()],
                   handlelength=plot_params.legend_handle_length,
                   loc=plot_params.legend_loc,
                   fontsize=plot_params.legend_fontsize,
                   handler_map={tuple: HandlerTuple(ndivide=None)})
    plt.savefig(plot_params.save)
    plt.close(fig)
    pass


def main():
    line_style_dict = {
        "solid": "-",
        "dash": "--",
        "dot_dash": "-.",
        "dot": ":"
    }
    cli = argparse.ArgumentParser("Curver: An Easy Guess-Crack Curve Drawer")
    valid_suffix = [".pdf", ".png"]
    cli.add_argument("-f", "--files", required=True, dest="json_files", nargs="+", type=argparse.FileType("r"),
                     help="json files generated by gcutify")
    cli.add_argument("-s", "--save", required=True, dest="fd_save", type=str,
                     help="save figure here")
    cli.add_argument("--suffix", dest="suffix", required=False, default=".pdf", type=str, choices=valid_suffix,
                     help="suffix of file to save figure, if specified file ends with 'suffix', "
                          "suffix here will be ignored.")
    cli.add_argument("-x", "--xlabel", required=False, dest="xlabel", type=str, default="Guesses",
                     help="what does x axis mean")
    cli.add_argument("-y", "--ylabel", required=False, dest="ylabel", type=str, default="Cracked",
                     help="what does y axis mean")
    cli.add_argument("--xlabel-weight", required=False, dest="xlabel_weight", type=str, default="normal",
                     choices=["normal", "bold"], help="weight of x label")
    cli.add_argument("--ylabel-weight", required=False, dest="ylabel_weight", type=str, default="normal",
                     choices=["normal", "bold"], help="weight of y label")
    cli.add_argument("--xlabel-size", required=False, dest="xlabel_size", type=float, default=12,
                     help="size of x label")
    cli.add_argument("--ylabel-size", required=False, dest="ylabel_size", type=float, default=12,
                     help="size of y label")
    cli.add_argument("--xlim-low", required=False, dest="xlim_low", type=float, default=DefaultVal.limlow,
                     help="lower bound of x")
    cli.add_argument("--xlim-high", required=False, dest="xlim_high", type=float, default=DefaultVal.limhigh,
                     help="upper bound of x")
    cli.add_argument("--ylim-low", required=False, dest="ylim_low", type=float, default=DefaultVal.limlow,
                     help="lower bound of y")
    cli.add_argument("--ylim-high", required=False, dest="ylim_high", type=float, default=DefaultVal.limhigh,
                     help="upper bound of y")
    cli.add_argument("--xticks-val", required=False, dest="xtick_sval", nargs="+", type=float,
                     default=DefaultVal.empty_ticks,
                     help="value of x ticks")
    cli.add_argument("--xticks-text", required=False, dest="xticks_text", nargs="+", type=float,
                     default=DefaultVal.empty_ticks,
                     help="text of x ticks")
    cli.add_argument("--yticks-val", required=False, dest="yticks_val", nargs="+", type=float,
                     default=DefaultVal.empty_ticks,
                     help="value of y ticks")
    cli.add_argument("--yticks-text", required=False, dest="yticks_text", nargs="+", type=float,
                     default=DefaultVal.empty_ticks,
                     help="text of y ticks")
    cli.add_argument("--tick-size", required=False, dest="tick_size", type=float, default=12,
                     help="size of ticks text")
    cli.add_argument("--legend-loc", required=False, dest="legend_loc", type=str, default=DefaultVal.legend,
                     choices=[DefaultVal.legend, "best", "upper left", "upper right", "bottom left", "bottom right"],
                     help="set it to -2 if you dont want use label")
    cli.add_argument("--legend-fontsize", required=False, dest="legend_fontsize", type=float,
                     default=DefaultVal.legendfontsize, help="font size of legend")
    cli.add_argument("--legend-handle-length", required=False, dest="legend_handle_length", type=float, default=2,
                     help="legend handle length")
    cli.add_argument("--xscale", required=False, dest="xscale", type=str, default="log",
                     choices=["linear", "log", "symlog", "logit"], help="scale x axis")
    cli.add_argument("--yscale", required=False, dest="yscale", type=str, default="linear",
                     choices=["linear", "log", "symlog", "logit"], help="scale y axis")
    cli.add_argument("--tight", required=False, dest="tight", default=False, action="store_true",
                     help="tight layout of figure")
    cli.add_argument("--vlines", required=False, dest="vlines", type=float, nargs="*", default=[],
                     help="vlines in the figure")
    cli.add_argument("--vline-width", required=False, dest="vline_width", type=float, nargs="*", default=[],
                     help="line width for vines")
    cli.add_argument("--vline-color", required=False, dest="vline_color", type=str, nargs="*", default=[],
                     help="colors for vlines in the figure")
    cli.add_argument("--vline-style", required=False, dest="vline_style", type=str, nargs="*", default=[],
                     choices=list(line_style_dict.keys()),
                     help="styles for vlines in the figure")
    cli.add_argument("--vline-label", required=False, dest="vline_label", type=str, nargs="*", default=[],
                     help="labels for vlines in the figure. Do not set if you don't want to show these labels.")

    args = cli.parse_args()
    suffix_ok = any([args.fd_save.endswith(suffix) for suffix in valid_suffix])
    if not suffix_ok:
        args.fd_save += args.suffix
    args.vlinestyle = [line_style_dict[vlinestyle] for vlinestyle in args.vlinestyle]
    plot_params = PlotParams(args)
    curve(json_files=args.json_files, plot_params=plot_params, close_fd=True)
    pass


if __name__ == '__main__':
    main()
