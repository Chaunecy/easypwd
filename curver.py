"""
This file is to draw curves using json files generated by gcutify.
Make sure that matplotlib is accessible
"""
import argparse
import json
import os
import sys
from typing import TextIO, List

import matplotlib.pyplot as plt

auto_legend = -2
no_legend = -1


def curve(json_files: List[TextIO], save: str, xlabel: str, ylabel: str,
          xscale: str, yscale: str, ysuffix: str,
          use_tight_layout: bool, close_fd: bool = True):
    if os.path.isdir(save):
        print(f"{save} is a directory, use a file please", file=sys.stderr)
        sys.exit(-1)
    fig = plt.figure()
    if use_tight_layout:
        fig.set_tight_layout(tight=True)
    try:
        for json_file in json_files:
            data = json.load(json_file)
            guesses_list = data["guesses_list"]
            cracked_list = data["cracked_list"]
            label = data["label"]
            color = data["color"]
            total = data["total"]
            marker = data["marker"]
            line_width = data["line_width"]
            line_style = data["line_style"]
            ratio_list = [cracked / total * 100 for cracked in cracked_list]
            del data
            del cracked_list
            plt.plot(guesses_list, ratio_list, color=color, marker=marker,
                     linewidth=line_width, linestyle=line_style, label=label)
            if close_fd:
                json_file.close()
    except KeyError as e:
        print(e)
        sys.exit(-1)
    plt.xscale(xscale)
    plt.yscale(yscale)
    plt.xlabel(xlabel=xlabel)
    plt.ylabel(ylabel=ylabel)
    y_locs, _ = plt.yticks()
    plt.yticks(y_locs, [f"{loc}{ysuffix}" for loc in y_locs])
    plt.grid(ls="--")
    plt.savefig(save)
    plt.close(fig)
    pass


def main():
    cli = argparse.ArgumentParser("Curver: An Easy Guess-Crack Curve Drawer")
    valid_suffix = [".pdf", ".png"]
    cli.add_argument("-f", "--files", required=True, dest="json_files", nargs="+", type=argparse.FileType("r"),
                     help="json files generated by gcutify")
    cli.add_argument("-s", "--save", required=True, dest="fd_save", type=str,
                     help="save figure here")
    cli.add_argument("--suffix", dest="suffix", required=False, default=".pdf", type=str, choices=valid_suffix,
                     help="suffix of file to save figure, if specified file ends with 'suffix', "
                          "suffix here will be ignored.")
    cli.add_argument("-x", "--xlabel", required=False, dest="xlabel", type=str, default="Guesses",
                     help="what does x axis mean")
    cli.add_argument("-y", "--ylabel", required=False, dest="ylabel", type=str, default="Cracked",
                     help="what does y axis mean")
    cli.add_argument("--ysuffix", required=False, dest="ysuffix", type=str, default="%",
                     help="symbol representing the unit of y axis")
    cli.add_argument("--legend-pos", required=False, dest="legend_pos", type=int, default=auto_legend,
                     help="set it to -1 if you dont want use label")
    cli.add_argument("--xscale", required=False, dest="xscale", type=str, default="log",
                     choices=["linear", "log", "symlog", "logit"], help="scale x axis")
    cli.add_argument("--yscale", required=False, dest="yscale", type=str, default="linear",
                     choices=["linear", "log", "symlog", "logit"], help="scale y axis")
    cli.add_argument("--tight", required=False, dest="tight", type=bool, default=True, help="tight layout of figure")

    args = cli.parse_args()
    suffix_ok = any([args.fd_save.endswith(suffix) for suffix in valid_suffix])
    if not suffix_ok:
        args.fd_save += args.suffix
    curve(json_files=args.json_files, save=args.fd_save, xscale=args.xscale, yscale=args.yscale,
          use_tight_layout=args.tight, xlabel=args.xlabel, ylabel=args.ylabel, ysuffix=args.ysuffix)
    pass


if __name__ == '__main__':
    main()
